// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  username   String    @unique
  name       String
  email      String?   @unique
  avatar_url String?
  accounts   Account[]
  sessions   Session[]

  created_at    DateTime        @default(now())
  authenticator Authenticator[]

  @@map("users")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String   @unique @map("session_token")
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Optional for WebAuthn support
model Authenticator {
  credential_id          String  @unique @map("credential_id")
  user_id                String
  provider_account_id    String  @map("provider_account_id")
  credential_publicKey   String
  counter                Int
  credential_device_type String  @map("credential_device_type")
  credential_backed_up   Boolean
  transports             String?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, credential_id])
  @@map("authenticators")
}
